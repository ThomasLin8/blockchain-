import React, {Component} from 'react'
import './App.css'

//api插件的引用
const ipfsAPI = require('ipfs-api');
//const contract = require('truffle-contract');
const Tx = require('ethereumjs-tx');
const Web3 = require('web3');
const InputDataDecoder = require('input-data-decoder-ethereum');
//const simpleStorage = contract(SimpleStorageContract)
//设置IPFS参数
const ipfs = ipfsAPI({host: 'localhost', port: '5001', protocol: 'http'});
//使用的合约的abi信息
const tokenAbi = [
	{
		"constant": false,
		"inputs": [
			{
				"name": "x",
				"type": "string"
			}
		],
		"name": "set",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "get",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
]
//发送账户的秘钥
const privateKey = Buffer.from('cd409c18f6cf377121ed78d471df8c371ff06391d5ebdb4a98d0d307eae70996', 'hex')
//配置web3的httpprovider，采用infura
const web3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:9545"));
const decoder = new InputDataDecoder(tokenAbi);
//let txlogs;
let senddata; //发送数据
let nonce; //nonce
let ttxhash;
const contractAddr = '0xc66dB24D0BDa9394392251c2495b842f4f6b3931';//合约地址
//"0xd19248be4aff0dbaf4b76f1bc75a947b18bc7eea";
//"0x6f12fbbc9eba17d78a357f042682d6a0db57a1ae";
web3.eth.defaultAccount = '0xd19248be4aff0dbaf4b76f1bc75a947b18bc7eea';//设置使用的账户
//初始化合约信息，便于后面合约交互的abi编码发送信息
const mycontract = new web3.eth.Contract(tokenAbi,contractAddr,{
  from: '0xd19248be4aff0dbaf4b76f1bc75a947b18bc7eea',
  gasPrice: '1000000000'
} );
// 定义存储图片到ipfs函数
let saveImageOnIpfs = (reader) => {
  return new Promise(function(resolve, reject) {
    const buffer = Buffer.from(reader.result); //将存入的结果转成buff
    ipfs.add(buffer).then((response) => {
      console.log(response)
      resolve(response[0].hash);//传回第一个函数的哈希值
    }).catch((err) => {
      console.error(err)
      reject(err);
    })
  })
}

class App extends Component {
  constructor(props) {
    super(props)

    this.state = {
      blockChainHash: null,
      address: contractAddr,
      imgHash: null,
      isWriteSuccess: false,
      txhash:null,
      tblockhash:null,
      msgshow: false,
      gasused: null,
      blockhash: null,
      readmsg: false,
      panduan: false
    }
  }

  componentWillMount() {

    ipfs.swarm.peers(function(err, res) {
      if (err) {
        console.error(err);
      } else {
        console.log(res);
      }
    });
  }

  render() {
    return (<div className="App">
      {
        this.state.address
          ? <h1>合约地址：{this.state.address}</h1>
          : <div/>
      }

      <h2>上传图片到IPFS：</h2>
      <div>
        <label id="file">Choose file to upload</label>
        <input type="file" ref="file" id="file" name="file" multiple="multiple"/>
      </div>
      <div>
        <button onClick={() => {
            const file = this.refs.file.files[0];
            const reader = new FileReader();
            // reader.readAsDataURL(file);
            reader.readAsArrayBuffer(file)
            reader.onloadend = function(e) {
              console.log(reader);
              saveImageOnIpfs(reader).then((hash) => {
                console.log('ipfs存储哈希值',hash);
                senddata = hash;
                //console.log(senddata);
                this.setState({imgHash: hash})
              });

            }.bind(this);

          }}>将图片上传到IPFS并返回图片HASH</button>
      </div>
      {
        this.state.imgHash
          ? <div>
              <h2>imgHash：{this.state.imgHash}</h2>
              <button onClick={() => {
                  //编码使用合约的函数及参数用于后续的交易
                    const encoded = mycontract.methods.set(senddata).encodeABI();
                    //获取账户的nonce
                     web3.eth.getTransactionCount(web3.eth.defaultAccount,'pending', function (err, nonce) {
                       console.log("nonce value is ", nonce);
                    //获取区块的gas限制
                    const gasLimit = web3.eth.getBlock("latest").gasLimit;
                    //估计交易花费的gas
                     const estimategas = web3.eth.estimateGas({
                          to: contractAddr,
                          data: encoded
                      });  
                    //估计gas价格
                    const gasPrice = web3.eth.getGasPrice();
                    //const dgasprice = web3.utils.hexToNumber(gasPrice);
                    //配置交易信息rawTx
                      const rawTx = {
                          nonce: web3.utils.toHex(nonce),
                          gasPrice: web3.utils.toHex(gasPrice),
                          //'0x3B9ACA00',
                          gasLimit: web3.utils.toHex(gasLimit),
                          gas: web3.utils.toHex(estimategas),
                          value: '0x00',
                          //chainId: '0x2A',
                          to: contractAddr,
                          data: encoded
                      };  
                       /* const rawTx = {
                          nonce: web3.utils.toHex(nonce), //交易
                          gasPrice: '0x3B9ACA00',
                          gasLimit: web3.utils.toHex(gasLimit),
                          gas: '0xEA60',
                          value: '0x00',
                          chainId: '0x2A',
                          to: contractAddr,
                          data: encoded
                      };  */
                      //tx交易签名
                        const tx = new Tx(rawTx);
                        tx.sign(privateKey);
                      //发送交易
                        const serializedTx = tx.serialize();
                        //console.log(serializedTx.toString('hex'));
                        web3.eth.sendSignedTransaction("0x" + serializedTx.toString('hex'), function (err, hash) {
                            console.log("交易的哈希值Tx: " + hash);
                            ttxhash = hash;                      
                        });  
                         
                     });
                    console.log('图片的hash已经写入到区块链！');
                    this.setState({txhash: ttxhash});
                    this.setState({isWriteSuccess: true});
                    this.setState({nonce: nonce});

                }}>将图片hash写到区块链：</button>
            </div>
          : <div/>
      }
      {
        this.state.isWriteSuccess
          ? <div>
              <h1>图片的hash正写入到区块链！</h1>

              <button onClick={() => {
                  this.setState({txhash: ttxhash});
                  web3.eth.getTransaction(this.state.txhash).then (
                  (rdata) => {
                    console.log('tx hash查找到的交易:',rdata);
                    //console.log('块哈希值:', rdata.blockHash);
                    const trdata = rdata.input;
                    console.log('解码前数据:', trdata);
                    const dedata = decoder.decodeData(trdata);
                    console.log('解码得到的哈希值', dedata.inputs);
                    this.setState({blockChainHash: dedata.inputs});
                    this.setState({gasused: rdata.gas});
                    this.setState({tblockhash: rdata.blockHash});
                    this.setState({msgshow: true});
                    this.setState({panduan: true});
                  }
                  )
                }}>查看交易完成情况</button>

            </div>
          : <div/>
      }

       {
        this.state.msgshow
        ?   this.state.tblockhash
            ? <div>
              <h1>交易已经完成</h1>
                    <button onClick={() => {
                    this.setState({readmsg: true});
                  }}>交易Hash值，存储数据等信息</button>

              </div>
            : <div>
              <h1>交易尚未完成，请稍后再查询</h1>
                </div> 
        : <div/>
            
         
      }
      
      {
        this.state.readmsg
          ? <div>
              <h2>从区块链读取到的hash值：{this.state.blockChainHash}</h2>
              <h2>该交易的Hash：{this.state.txhash}</h2>
              <h2>该交易的区块链Hash：{this.state.tblockhash}</h2>
              <h2>该交易消耗的gas：{this.state.gasused}</h2>
            </div>
          : <div/>
      }
      {
        this.state.readmsg
          ? <div>
              <h2>浏览器访问：{"http://localhost:8080/ipfs/" + this.state.blockChainHash}</h2>
              <img alt="" style={{
                  width: 1600
                }} src={"http://localhost:8080/ipfs/" + this.state.blockChainHash}/>
            </div>
          : <img alt=""/>
      }
    </div>);
  }
}
//https://api-kovan.etherscan.io/api?module=transaction&action=getstatus&txhash=this.state.txhash&apikey=F13BIABP5ZQQ1ZPK4SXKKABWZCNUKCUJ43

//https://api-kovan.etherscan.io/api?module=transaction&action=getstatus&txhash=0x5f2b504840d792c17f0223a71a23dea381c94fb918219d69c7275f392c23d7a5&apikey=F13BIABP5ZQQ1ZPK4SXKKABWZCNUKCUJ43
export default App